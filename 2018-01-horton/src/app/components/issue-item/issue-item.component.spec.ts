/* tslint:disable: no-floating-promises */
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { IssueItemComponent } from './issue-item.component';
import { IssueItem } from '../../models/issue-item';
import { DebugElement, Directive, Input, OnInit } from '@angular/core';
import { By } from '@angular/platform-browser';
import { getTextWithSelector } from '../../../testing/utils';
import createSpy = jasmine.createSpy;

const rgba = require('color-normalize');

const issueItem = new IssueItem({
  id: 42,
  title: 'Foo',
  created_at: 1516534249264,
  user: { login: 'Waldo' },
  labels: [
    { name: 'bar', color: 'ffff00' },
    { name: 'baz', color: 'ff00ff' },
    { name: 'qux', color: '00ffff' }
  ],
  body: '# Corge.'
});

const markdownDirectiveInputSpy = createSpy('text');

@Directive({
  selector: '[appMarkdown]'
})
class MockMarkdownDirective implements OnInit {
  @Input('appMarkdown') text: string;
  ngOnInit () { markdownDirectiveInputSpy(this.text); }
}

describe('IssueItemComponent', () => {
  let component: IssueItemComponent;
  let fixture: ComponentFixture<IssueItemComponent>;
  let el: DebugElement;

  // we don't have ngOnChanges, so we can get away with
  // directly manipulating the component @input
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ MockMarkdownDirective, IssueItemComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(IssueItemComponent);
    component = fixture.componentInstance;

    // without this the autogenerated fixture.detectChanges below would cause karma
    // to fail without an error message, unless it is run with `ng test --sourcemaps=false`
    component.item = issueItem;

    el = fixture.debugElement;
    fixture.detectChanges();
  });

  it('should be created', () => {
    expect(component).toBeTruthy();
  });

  it('should update its contents from the input issue', () => {
    const getText = selector => getTextWithSelector(el, selector);
    expect(getText('.title')).toBe('Foo');
    expect(getText('.id')).toBe('#42');
    expect(getText('.user-name')).toBe('Waldo');
    expect(getText('.date')).toBe('1/21/18, 12:30 PM'); // mock date pipe?

    const els = el.queryAll(By.css('.labels li')).map(dEl => dEl.nativeElement);

    // check the textcontent of the labels
    expect(els.map(nEl => nEl.textContent.trim()))
      .toEqual(['bar', 'baz', 'qux']);

    // check the rendered colors (browser engine may return parsed rgba, hence the normalization)
    expect(els.map(nEl => rgba(nEl.style.backgroundColor)))
      .toEqual([[1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1]]);
  });

  it('should pass the markdown text to the markdown directive if the issue box is opened', () => {
    const title = el.query(By.css('.title')).nativeElement;
    title.click();
    fixture.detectChanges();
    expect(markdownDirectiveInputSpy).toHaveBeenCalledWith('# Corge.');
  });

  it('should toggle the "opened" class on the container if the user clicks on an issue', () => {
    const container = el.query(By.css('.container')).nativeElement;

    expect(container.classList.contains('opened')).toBeFalsy();
    container.click();
    fixture.detectChanges();
    expect(container.classList.contains('opened')).toBeTruthy();
  });

  it('should add the "static" class on the container if there is no body text to display', () => {
    const container = el.query(By.css('.container')).nativeElement;

    expect(container.classList.contains('static')).toBeFalsy();
    component.item.body = '';
    fixture.detectChanges();
    expect(container.classList.contains('static')).toBeTruthy();
  });
});
